
using UnityEngine;

public class Plushie : MonoBehaviour
{
    public float speed = 1f;
    public float tapRange = 5f;
    public float attackRange = 1.5f;
    public float attackDistance = 1f;  // —Ä–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª—é—à–∞ "–ø—Ä–∏–¥–∞–≤–ª–∏–≤–∞–µ—Ç"
    public float closeAttackDistance = 0.3f;
    public float crushDuration = 5f; // —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –µ—Å—Ç—å –Ω–∞ —Å–ø–∞—Å–µ–Ω–∏–µ
    public int requiredTapsToSurvive = 7;
    public int requiredTaps = 7;        

    public Transform target;

    private int tapCount = 0;
    private bool isAttacking = false;
    private bool isDead = false;
    private float crushTimer = 0f;
    private bool isCrushing = false;

    private GameManager gameManager;
    private Vector3 stopPosition;

    void Start()
    {
        GameObject targetObj = GameObject.Find("PlushieTarget");

        if (targetObj != null)
        {
            target = targetObj.transform;
        }
        else
        {
            Debug.LogWarning("‚ùó PlushieTarget –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞.");
            target = Camera.main.transform;
        }

        gameManager = FindObjectOfType<GameManager>();
    }



    void Update()
    {
        if (isDead) return;

        float distance = Vector3.Distance(transform.position, target.position);
        Debug.Log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞: " + distance);

        if (isCrushing)
        {
            if (isDead)
            {
                isCrushing = false;
                return;
            }

            crushTimer -= Time.deltaTime;

            // üëâ –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–ø–ª–∞–≤–Ω–æ–µ "–æ–ø—É—Å–∫–∞–Ω–∏–µ" –≤–Ω–∏–∑)
            transform.position = Vector3.Lerp(transform.position, stopPosition, Time.deltaTime * 2f);

            if (crushTimer <= 0f)
            {
                gameManager.GameOver("–ü–ª—é—à–∞ –ø—Ä–∏–¥–∞–≤–∏–ª–∞!");
                Destroy(gameObject);
                return;
            }

            return;
        }

        // üëâ –ï—Å–ª–∏ –ø–æ–¥–æ—à–ª–∞ –±–ª–∏–∑–∫–æ –∏ –µ—â—ë –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∞
        if (distance <= attackRange && !isAttacking)
        {
            isAttacking = true;
            Debug.Log($"üî• –ü–ª—é—à–∞ –Ω–∞—á–∞–ª–∞ –∞—Ç–∞–∫—É –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏: {distance:F2}");
            isCrushing = true;
            crushTimer = crushDuration;
            stopPosition = target.position + target.forward * -0.5f;

            stopPosition = target.position + Vector3.up * 0.1f; // –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è, –ø–æ—Ç–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è

            if (!isDead)
            {
                gameManager.RegisterAttackingPlush(this);
                Debug.Log($"üìå –ü–ª—é—à–∞ –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∏—Ç—å. –í—Å–µ–≥–æ: {gameManager.GetAttackingCount()}");
            }
        }

        // üëâ –î–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
        if (!isDead)
        {
            transform.position = Vector3.MoveTowards(transform.position, target.position, speed * Time.deltaTime);
        }
        Debug.Log($"[üëÅ Plushie] isDead={isDead}, isCrushing={isCrushing}, position={transform.position}, distance={Vector3.Distance(transform.position, target.position)}");

    }

    public void Tap()
    {
        if (isDead) return;

        if (!isAttacking)
        {
            Die();
        }
        else if (isAttacking)
        {
            tapCount++;
            if (tapCount >= requiredTaps)
            {
                Die();
            }
        }
    }

    void Die()
    {
        if (isDead) return;

        isDead = true;
        isCrushing = false;

        if (gameManager != null)
        {
            gameManager.UnregisterAttackingPlush(this);
        }

        Destroy(gameObject);
    }

    public bool IsAttacking()
    {
        return isAttacking;
    }

    public bool IsDead()
    {
        return isDead;
    }
}
