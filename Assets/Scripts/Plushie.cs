using UnityEngine;

public class Plushie : MonoBehaviour
{
    public float speed = 1f;
    public float tapRange = 5f;
    public float attackRange = 0.5f;
    public float attackDistance = 1f;  // —Ä–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª—é—à–∞ "–ø—Ä–∏–¥–∞–≤–ª–∏–≤–∞–µ—Ç"
    public float closeAttackDistance = 0.3f;
    public float crushDuration = 5f; // —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –µ—Å—Ç—å –Ω–∞ —Å–ø–∞—Å–µ–Ω–∏–µ
    public int requiredTapsToSurvive = 7;
    public int requiredTaps = 7;        

    public Transform target;

    private int tapCount = 0;
    private bool isAttacking = false;
    private bool isDead = false;
    private float crushTimer = 0f;
    private bool isCrushing = false;

    private GameManager gameManager;
    private Vector3 stopPosition;

    void Start()
    {
        GameObject targetObj = GameObject.Find("PlushieTarget");

        if (targetObj != null)
        {
            target = targetObj.transform;
        }
        else
        {
            Debug.LogWarning("‚ùó PlushieTarget –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞.");
            target = Camera.main.transform;
        }

        gameManager = FindObjectOfType<GameManager>();
    }

    void Update()
    {
        if (isDead || gameManager.IsGameOver()) return;

        float distance = Vector3.Distance(transform.position, target.position);

        // üëâ –§–∞–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è (–ø–ª—é—à–∞ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –∏–≥—Ä–æ–∫–∞)
        if (isCrushing)
        {
            crushTimer -= Time.deltaTime;

            // –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è
            transform.position = Vector3.MoveTowards(transform.position, stopPosition, Time.deltaTime * 2f);

            // –ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å ‚Äî —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
            if (crushTimer <= 0f && !isDead)
            {
                gameManager.ReduceHP();
                Destroy(gameObject);
            }

            return;
        }

        // üëâ –ù–∞—á–∞–ª–æ –∞—Ç–∞–∫–∏ ‚Äî –ø–ª—é—à–∞ –ø–æ–¥–æ—à–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ
        if (distance <= attackRange && !isAttacking)
        {
            isAttacking = true;
            isCrushing = true;
            crushTimer = crushDuration;

            // –°—Ç–∞–≤–∏–º —Ç–æ—á–∫—É –¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–∫–æ–º –∏ —á—É—Ç—å –≤—ã—à–µ
            stopPosition = target.position + target.forward * -0.5f + Vector3.up * 0.1f;

            gameManager.ReduceHP(); // üíî –°–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞—Ç–∞–∫–∏
            gameManager.RegisterAttackingPlush(this);

            Debug.Log($"üî• –ü–ª—é—à–∞ –Ω–∞—á–∞–ª–∞ –∞—Ç–∞–∫—É. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:F2}");
            return;
        }

        // üëâ –ï—Å–ª–∏ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–µ –º—ë—Ä—Ç–≤–∞—è ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –∏–≥—Ä–æ–∫—É
        if (!isDead)
        {
            transform.position = Vector3.MoveTowards(transform.position, target.position, speed * Time.deltaTime);
        }
    }


    /* void Update()
     {
         if (isDead || gameManager.IsGameOver()) return;

         float distance = Vector3.Distance(transform.position, target.position);
        // Debug.Log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞: " + distance);

         if (isCrushing)
         {
             if (isDead)
             {
                 isCrushing = false;
                 return;
             }

             crushTimer -= Time.deltaTime;

             // üëâ –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–ø–ª–∞–≤–Ω–æ–µ "–æ–ø—É—Å–∫–∞–Ω–∏–µ" –≤–Ω–∏–∑)
             transform.position = Vector3.Lerp(transform.position, stopPosition, Time.deltaTime * 2f);

             if (crushTimer <= 0f)
             {
                 gameManager.ReduceHP();
                 // gameManager.GameOver("–ü–ª—é—à–∞ –ø—Ä–∏–¥–∞–≤–∏–ª–∞!");
                 Destroy(gameObject);
                 return;
             }

             return;
         }

         // üëâ –ï—Å–ª–∏ –ø–æ–¥–æ—à–ª–∞ –±–ª–∏–∑–∫–æ –∏ –µ—â—ë –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∞
         if (distance <= attackRange && !isAttacking)
         {
             isAttacking = true;
             Debug.Log($"üî• –ü–ª—é—à–∞ –Ω–∞—á–∞–ª–∞ –∞—Ç–∞–∫—É –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏: {distance:F2}");
             isCrushing = true;
             crushTimer = crushDuration;
             stopPosition = target.position + target.forward * -0.5f + Vector3.up * 0.1f;

             if (!isDead)
             {
                 gameManager.ReduceHP(); // üíî –°–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å, –∫–æ–≥–¥–∞ –ø–ª—é—à–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∞—Ç–∞–∫—É
                 gameManager.RegisterAttackingPlush(this);

             }
         }

         // üëâ –î–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
         if (!isDead)
         {
             transform.position = Vector3.MoveTowards(transform.position, target.position, speed * Time.deltaTime);
         }


     }*/


    public void Tap()
    {
        if (isDead) return;

        if (!isAttacking)
        {
            Die();
        }
        else if (isAttacking)
        {
            tapCount++;
            if (tapCount >= requiredTaps)
            {
                Die();
            }
        }
    }

    void Die()
    {
        if (isDead) return;

        isDead = true;
        isCrushing = false;

        Debug.Log($"üíÄ Die() –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–ª—é—à–∏ {name} ({GetInstanceID()})");

        if (gameManager != null)
        {
            gameManager.UnregisterAttackingPlush(this);
            gameManager.NotifyPlushDestroyed(); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏
        }

        Destroy(gameObject); // ‚úÖ –ù–µ –∑–∞–±—É–¥—å!
    }

    public bool IsAttacking()
    {
        return isAttacking;
    }

    public bool IsDead()
    {
        return isDead;
    }

    public void Freeze()
    {
        Debug.Log("‚ùÑ –ü–ª—é—à–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞: " + gameObject.name);
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª—é—à–∫–∏
        isDead = true;
        isCrushing = false;

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã, –º–æ–∂–µ—à—å –∏—Ö –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–¥–µ—Å—å

        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã Update –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
        enabled = false;
    }

    public bool IsCrushing()
    {
        return isCrushing;
    }
}
